#ifndef __EVENT_H__
#define __EVENT_H__
/*****************************************************************************/
/*                                                                           */
/*    Copyright (C) - LEGATE Intelligent Equipment - All rights reserved     */
/*                                                                           */
/*****************************************************************************/
/*                                                                           */
/*  Except if expressly provided in a dedicated License Agreement, you are   */
/*  not authorized to:                                                       */
/*                                                                           */
/*  1. Use, copy, modify or transfer this software component, module or      */
/*  product, including any accompanying electronic or paper documentation    */
/*  (together, the "Software").                                              */
/*                                                                           */
/*  2. Remove any product identification, copyright, proprietary notices or  */
/*  labels from the Software.                                                */
/*                                                                           */
/*  3. Modify, reverse engineer, decompile, disassemble or otherwise attempt */
/*  to reconstruct or discover the source code, or any parts of it, from the */
/*  binaries of the Software.                                                */
/*                                                                           */
/*  4. Create derivative works based on the Software (e.g. incorporating the */
/*  Software in another software or commercial product or service without a  */
/*  proper license).                                                         */
/*                                                                           */
/*  By installing or using the "Software", you confirm your acceptance of the*/
/*  hereabove terms and conditions.                                          */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*  History:                                                                 */
/*****************************************************************************/
/*  Date       * Author          * Changes                                   */
/*****************************************************************************/
/*  2011-10-14 * Ricky Gong      * Creation of the file                      */
/*  2012-12-18 * Ricky Gong      * Added Linux implementations               */
/*             *                 *                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*  Include Files                                                            */
/*                                                                           */
/*****************************************************************************/
#if defined(_WIN32)
#ifdef _MSC_VER // ignore 4786 warning in MS VC
#pragma warning(disable:4786)
#endif
#endif

#if defined(_WIN32)
#if !defined(UNDER_CE)
    #ifdef _WIN32_WINNT
        #undef _WIN32_WINNT
    #endif
    #define _WIN32_WINNT 0x500
#endif
#endif

#include <list>
#include <map>
#include <string>
#if defined(_WIN32)
#include "Windows.h"
#endif

#include "singleInst.h"
#include "sync.h"


/*****************************************************************************/
/*                                                                           */
/*  Definitions                                                              */
/*                                                                           */
/*****************************************************************************/
#if defined(_WIN32)
#if !defined(UNDER_CE)
    #if !defined(ASSERT)
        #ifdef _DEBUG
            #define ASSERT(x) {if(!(x)) _asm{int 0x03}}
        #else
            #define ASSERT(x)
        #endif
    #endif
#endif
#endif


/*****************************************************************************/
/* Class Description:                                                        */
/*****************************************************************************/
/*   Event interface class                                                   */
/*                                                                           */
/*****************************************************************************/
class IEvent
{
    public:

        /*********************************************************************/
        /*                     Constructor & Destructor                      */
        /*********************************************************************/
        virtual ~IEvent();


        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/


    private:

        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/


    protected:

        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/


};

class CEventProvider;

/*****************************************************************************/
/* Class Description:                                                        */
/*****************************************************************************/
/*   Event observer class                                                    */
/*                                                                           */
/*****************************************************************************/
class CEventObserver
{
    public:

        /*********************************************************************/
        /*                     Constructor & Destructor                      */
        /*********************************************************************/
        virtual ~CEventObserver();


        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/
        virtual void onEvent(CEventProvider& rProvider, const IEvent& rEvent);
        void ackSubscribe(CEventProvider* pProvider);
        void ackUnsubscribe(CEventProvider* pProvider);


    private:

        typedef std::list<CEventProvider*> TEventProviderList;

        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/
        TEventProviderList  m_providers;
        DECLARE_THREAD_SAFE

        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/


    protected:

        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/


};

/*****************************************************************************/
/* Class Description:                                                        */
/*****************************************************************************/
/*   Event observer template class                                           */
/*                                                                           */
/*****************************************************************************/
template <class TEvent>
class CEventObserverT: public CEventObserver
{
    public:

        /*********************************************************************/
        /*                     Constructor & Destructor                      */
        /*********************************************************************/
        virtual void onEvent(CEventProvider& rProvider,
                             const TEvent& rEvent) = 0;


        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/


    private:

        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/
        void onEvent(CEventProvider& rProvider, const IEvent& rEvent)
        {
            const TEvent*   pEvent;
            if ((pEvent = dynamic_cast<const TEvent*>(&rEvent)))
            {
                onEvent(rProvider, *pEvent);
            }
            else
            {
                ASSERT(pEvent);
            }
        }


    protected:

        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/


};

/*****************************************************************************/
/* Class Description:                                                        */
/*****************************************************************************/
/*   Event provider class                                                    */
/*                                                                           */
/*****************************************************************************/
class CEventProvider
{
    public:

        /*********************************************************************/
        /*                     Constructor & Destructor                      */
        /*********************************************************************/
        virtual ~CEventProvider();



        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/
        void subscribe(CEventObserver* pObserver);
        void subscribe(CEventObserver* pObserver, const IEvent& rEvent);
        void unsubscribe(CEventObserver* pObserver);
        void unsubscribe(CEventObserver* pObserver, const IEvent& rEvent);
        int getNbObservers(const IEvent& rEvent) const;


    private:

        typedef std::list<CEventObserver*> TEventObserverList;
        typedef std::map<std::string, TEventObserverList> TEventObserverMap;

        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/
        TEventObserverMap   m_observers;
        DECLARE_THREAD_SAFE


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/


    protected:

        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/
        void declare(const IEvent& rEvent);
        unsigned int notify(const IEvent& rEvent);


};

#define EVENT(evt) \
    static_cast<CEventObserverT<evt>*>(this), \
    evt()

/*****************************************************************************/
/* Class Description:                                                        */
/*****************************************************************************/
/*   Event provider template class                                           */
/*                                                                           */
/*****************************************************************************/
template <class TEvent>
class CEventProviderT: virtual public CEventProvider
{
    public:

        /*********************************************************************/
        /*                     Constructor & Destructor                      */
        /*********************************************************************/
        CEventProviderT()
        {
            declare(TEvent());
        }


        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/


    private:

        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/


    protected:

        /*********************************************************************/
        /*                            Variables                              */
        /*********************************************************************/


        /*********************************************************************/
        /*                            Functions                              */
        /*********************************************************************/


};


/*****************************************************************************/
/*                                                                           */
/*  Variable Declarations                                                    */
/*                                                                           */
/*****************************************************************************/


/*****************************************************************************/
/*                                                                           */
/*  Function Declarations                                                    */
/*                                                                           */
/*****************************************************************************/


#endif //__EVENT_H__

