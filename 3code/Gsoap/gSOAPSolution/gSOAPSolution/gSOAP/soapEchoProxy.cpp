/* soapEchoProxy.cpp
   Generated by gSOAP 2.8.36 for soapInterface.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapEchoProxy.h"

EchoProxy::EchoProxy() : soap(SOAP_IO_DEFAULT)
{	EchoProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

EchoProxy::EchoProxy(const EchoProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

EchoProxy::EchoProxy(const struct soap &_soap) : soap(_soap)
{ }

EchoProxy::EchoProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	EchoProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

EchoProxy::EchoProxy(soap_mode iomode) : soap(iomode)
{	EchoProxy_init(iomode, iomode);
}

EchoProxy::EchoProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	EchoProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

EchoProxy::EchoProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	EchoProxy_init(imode, omode);
}

EchoProxy::~EchoProxy()
{
	this->destroy();
	}

void EchoProxy::EchoProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns", "http://tempuri.org/ns.xsd", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
EchoProxy *EchoProxy::copy()
{	EchoProxy *dup = SOAP_NEW_COPY(EchoProxy(*(struct soap*)this));
	return dup;
}
#endif

EchoProxy& EchoProxy::operator=(const EchoProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void EchoProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void EchoProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	EchoProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void EchoProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *EchoProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *EchoProxy::soap_fault()
{	return this->fault;
}

const char *EchoProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *EchoProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int EchoProxy::soap_close_socket()
{	return soap_closesock(this);
}

int EchoProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void EchoProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void EchoProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *EchoProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int EchoProxy::echo(const char *endpoint, const char *soap_action, std::string str, std::string &resault)
{	struct soap *soap = this;
	struct ns__echo soap_tmp_ns__echo;
	struct ns__echoResponse *soap_tmp_ns__echoResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_tmp_ns__echo.str = str;
	soap_begin(soap);
	soap_set_version(soap, 0); /* no SOAP */
	soap->encodingStyle = NULL;
	soap_serialize_ns__echo(soap, &soap_tmp_ns__echo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put_ns__echo(soap, &soap_tmp_ns__echo, "ns:echo", "")
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_extend_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put_ns__echo(soap, &soap_tmp_ns__echo, "ns:echo", "")
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<std::string*>(&resault)) // NULL ref?
		return soap_closesock(soap);
	soap_default_std__string(soap, &resault);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__echoResponse = soap_get_ns__echoResponse(soap, NULL, "ns:echoResponse", NULL);
	if (!soap_tmp_ns__echoResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	resault = soap_tmp_ns__echoResponse->resault;
	return soap_closesock(soap);
}

int EchoProxy::login(const char *endpoint, const char *soap_action, std::string account, std::string password, std::string mode, std::string &resault)
{	struct soap *soap = this;
	struct ns__login soap_tmp_ns__login;
	struct ns__loginResponse *soap_tmp_ns__loginResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_tmp_ns__login.account = account;
	soap_tmp_ns__login.password = password;
	soap_tmp_ns__login.mode = mode;
	soap_begin(soap);
	soap_set_version(soap, 0); /* no SOAP */
	soap->encodingStyle = NULL;
	soap_serialize_ns__login(soap, &soap_tmp_ns__login);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put_ns__login(soap, &soap_tmp_ns__login, "ns:login", "")
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_extend_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put_ns__login(soap, &soap_tmp_ns__login, "ns:login", "")
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<std::string*>(&resault)) // NULL ref?
		return soap_closesock(soap);
	soap_default_std__string(soap, &resault);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__loginResponse = soap_get_ns__loginResponse(soap, NULL, "ns:loginResponse", NULL);
	if (!soap_tmp_ns__loginResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	resault = soap_tmp_ns__loginResponse->resault;
	return soap_closesock(soap);
}
/* End of client proxy code */
