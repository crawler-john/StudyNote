/* soapEchoService.cpp
   Generated by gSOAP 2.8.36 for soapInterface.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapEchoService.h"

EchoService::EchoService() : soap(SOAP_IO_DEFAULT)
{	EchoService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

EchoService::EchoService(const EchoService& rhs)
{	soap_copy_context(this, &rhs);
}

EchoService::EchoService(const struct soap &_soap) : soap(_soap)
{ }

EchoService::EchoService(soap_mode iomode) : soap(iomode)
{	EchoService_init(iomode, iomode);
}

EchoService::EchoService(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	EchoService_init(imode, omode);
}

EchoService::~EchoService()
{
	this->destroy();
}

void EchoService::EchoService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns", "http://tempuri.org/ns.xsd", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

void EchoService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void EchoService::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	EchoService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
EchoService *EchoService::copy()
{	EchoService *dup = SOAP_NEW_COPY(EchoService(*(struct soap*)this));
	return dup;
}
#endif

EchoService& EchoService::operator=(const EchoService& rhs)
{	soap_copy_context(this, &rhs);
	return *this;
}

int EchoService::soap_close_socket()
{	return soap_closesock(this);
}

int EchoService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int EchoService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int EchoService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int EchoService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int EchoService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void EchoService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void EchoService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *EchoService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void EchoService::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *EchoService::soap_header()
{	return this->header;
}

int EchoService::run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int EchoService::ssl_run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->error;
}
#endif

SOAP_SOCKET EchoService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET EchoService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int EchoService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif

int EchoService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif
		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if ((dispatch() || (this->fserveloop && this->fserveloop(this))) && this->error && this->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns__echo(EchoService*);
static int serve_ns__login(EchoService*);

int EchoService::dispatch()
{
	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns:echo"))
		return serve_ns__echo(this);
	if (!soap_match_tag(this, this->tag, "ns:login"))
		return serve_ns__login(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ns__echo(EchoService *soap)
{	struct ns__echo soap_tmp_ns__echo;
	struct ns__echoResponse soap_tmp_ns__echoResponse;
	soap_default_ns__echoResponse(soap, &soap_tmp_ns__echoResponse);
	soap_default_ns__echo(soap, &soap_tmp_ns__echo);
	if (!soap_get_ns__echo(soap, &soap_tmp_ns__echo, "ns:echo", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->echo(soap_tmp_ns__echo.str, soap_tmp_ns__echoResponse.resault);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_ns__echoResponse(soap, &soap_tmp_ns__echoResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__echoResponse(soap, &soap_tmp_ns__echoResponse, "ns:echoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__echoResponse(soap, &soap_tmp_ns__echoResponse, "ns:echoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__login(EchoService *soap)
{	struct ns__login soap_tmp_ns__login;
	struct ns__loginResponse soap_tmp_ns__loginResponse;
	soap_default_ns__loginResponse(soap, &soap_tmp_ns__loginResponse);
	soap_default_ns__login(soap, &soap_tmp_ns__login);
	if (!soap_get_ns__login(soap, &soap_tmp_ns__login, "ns:login", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->login(soap_tmp_ns__login.account, soap_tmp_ns__login.password, soap_tmp_ns__login.mode, soap_tmp_ns__loginResponse.resault);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_ns__loginResponse(soap, &soap_tmp_ns__loginResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__loginResponse(soap, &soap_tmp_ns__loginResponse, "ns:loginResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__loginResponse(soap, &soap_tmp_ns__loginResponse, "ns:loginResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
