1.按键驱动的第一个版本
由于用户空间和内核空间不能直接访问对方的数据
但是如果有需要的话，可以通过以下函数来实现数据的拷贝
copy_to_user
copy_from_user

2.中断
1）为什么要使用中断？
CPU处理速度源高于外部硬件的处理速度，使用中断能提高CPU的效率，避免做很多无用功
2)中断的硬件连接方式
外设产生电信号---->中断控制器，对电信号进行检测和处理，再决定是否将电信号发送给CPU---->如果发送给了CPU，CPU就会处理这个电信号
3)CPU如何处理中断
中断有优先级，高优先级的中断可以打断低优先级的中断
中断---->异常向量表
保护现场
处理中断(中断服务程序)
恢复现场
4)内核如何实现中断编程
向申请中断资源
request_irq
free_irq
5)内核中使用中断的注意事项
a.中断处理程序不要过于冗长，时间越短越好
b.中断处理程序在内核空间随机执行，不属于任何进程，不参与进程调度
c.中断不能和用户空间进行数据交互，一定要交互，要使用系统调用
d.中断处理程序不能调用引起阻塞的函数(copy_to...)

可通过
cat /proc/interrupts来查看中断的注册信息

理想状态下要求中断处理越快越好，但某些场合无法满足这个要求，
比如网卡接收数据是使用中断实现的，如过卡一直使用中断，那么一定会影响系统的正常能够运行，如何解决？

对于这种情况，使用顶半部和底半部的实现方法，其实就是将中断处理程序分为2个部分
顶半部：就是中断处理程序,做一些比较紧急，不能被中断的事情
比如网卡将数据包从网卡的硬件缓冲区拷贝到内存，这个过程不能被打断，然后在顶半部中登记底半部,，当CPU空闲的时候,回去执行底半部中的剩余工作

底半部：做一些不紧急，相对耗时的工作,比如将数据包提交给协议层的过程，这个过程可以被新的中断打断

如何实现底半部？
tasklet
工作者队列
软中断

tasklet如何使用？
1.数据结构
struct tasklet_struct
{
	//tasklet的处理函数，底半部要实现的功能就在该函数中来实现
	void (*func)(unsigned long);
	//给处理函数传递的参数,一般我们传递指针
	unsigned long data;
};

2.使用
a.分配
b.初始化
方法1：
	DECLARE_TASKLET(taskletname,tasklet_func,data);
方法2:
	struct tasklet_struct mytasklet;
	tasklet_init(&mytasklet,tasklet_func,data);
c.在中断处理程序中登记tasklet（不是调用）
	tasklet_schedule(&mytasklet);
d.tasklet还是工作在中断上下文(不允许睡眠)


tasklet不允许睡眠，如果底半部需要睡眠可以使用工作者队列
工作者队列
数据结构：
struct work_struct {
	//只关心处理函数的字段
	work_func_t func;
	...
};
延时工作者队列的结构：
struct delayed_work {
	struct work_struct work;
	struct timer_list timer;
};
//能够指定在哪个时刻去执行对应的处理函数

如何使用：
1.分配
struct work_struct mywork;
struct delayed_work mydwork;
2.初始化
INIT_WORK(&mywork,mywork_func);
INIT_DELAYED_WORK(&mydwork,mydwork_func);
3.在中断处理程序中登记
schedule_work(&mywork);
//cpu会在释放时候调用对应的处理函数
schedule_delayed_work(&mydwork,3*HZ);
//CPU会在3s后调用对应的处理函数

工作和延时工作默认是交给内核默认线程处理，你也可以自己申请线程来执行
实现：
1.分配
2.初始化
3.创建自己的工作队列和内核线程
工作队列指针(workqueue_struct) = create_workqueue(线程名);
4.中断处理函数中登记底半部
queue_work(自己的工作者队列，自己的工作)；
queue_delayed_work(自己的工作者队列，自己的延时工作，时间间隔)


3.内核定时器
系统定时器硬件
通过软件设置定时器硬件的工作频率，周期性发生时钟中断
既然是中断，内核中一定有对应的处理函数，这个程序会完成以下事情
1.更新系统的运行时间
2.更新实际时间
3.检查进程的时间片信息
4.支持超时的定时器
.....

内核中和时间相关的概念
HZ：用于设置硬件定时器的工作频率，
    ARM：HZ=100，表示1秒钟发生100次时钟中断
tick:1/HZ，发生一次时钟中断所需要的时间间隔
    ARM：HZ=100，1tick = 10ms
jiffies:内核32位的全局变量，用来记录开机以来发生了多少次时钟中断
    一般内核使用它来表示时间
    unsigned long time_out = jiffies + HZ;//1s之后的jiffies的值 

内核定时器：
数据结构：
struct timer_list {
	unsigned long expires;
	//超时的时候jiffies的值
	void (*function)(unsigned long);
	//超时处理函数
	unsigned long data;
	//传递给超时处理函数的参数
};

如何使用
1.分配
struct time_list mytimer;
2.初始化定时器
init_timer(&mytimer);//我们关心的三个字段需要另外指定
//指定超时时间
mytimer.expires = jiffies + 5*HZ;
//指定超时处理函数
mytimer.function = mytimer_function
//指定超时处理函数的参数
mytimer.data = ....
3.向内核添加启动定时器
add_timer(&mytimer);
//后续的工作都是由内核来做
4.可以修改定时器
mod_timer(&mytimer,jiffies + 3*HZ);
//设置新的超时时间在3s之后
mod_timer = del_timer + expires=.... + add_timer

5.删除定时器
del_timer(&mytimer);


4.内核的竞态和并发
概念：
共享资源访问的管理
互斥和临界区

哪些情况会产生竞态
进程和进程
中断和中断
进程和中断

linux内核提供的互斥访问的机制
1.中断屏蔽
在运行临界区的时候屏蔽其他中断
local_irq_save
.....
local_irq_restore
中断对操作系统的运行至关重要，长时间屏蔽中断是很危险的,所以屏蔽中断后应该立即处理完临界区,尽快恢复中断

2.原子操作
解决所有场合的竞态
位原子操作
	set_bit
	clear_bit
	change_bit
	test_bit
整型原子操作
数据类型：atomic_t
	
	....

3.自旋锁
自旋锁 = 自旋 + 锁
标准自旋锁除了中断以外的竞态都能解决，但是衍生自旋锁可以解决所有场合的竞态
数据类型:spinlock_t
如何使用？
1.分配自旋锁
spinlock_t lock;
2.初始化自旋锁
spin_lock_init(&lock);
3.获取锁
spin_lock(&lock);//进程获取不了锁，在原地忙等待
或者
spin_trylock(&lock);//如果或去不了锁，函数会返回false，获取成功返回true,一定要对该函数进行返回值判断
4.执行临界区
不能长时间执行，不能调用引起阻塞的函数copy_... , kmalloc
5.释放锁
spin_unlock(&lock);

如果竞态中涉及中断，要使用衍生自旋锁
获取锁:spin_lock_irqsave()
释放锁:spin_lock_irqrestore()

4.信号量
是使用睡眠锁实现
数据类型：struct semaphore
如何使用？
1.分配
struct semaphore sema;
2.初始化
sema_init(&sema,1);//互斥信号量
3.获取信号量
down(&sema);//如果进程无法获取信号量，进程进入不可中断的睡眠状态
down_interruptible(&sema);//如果进程无法获取信号量，进程进入可中断的睡眠状态，表示他可以接受外来的信号
返回0，表示获取到了信号量，否则表示收到了信号
4.临界区
临界区可以很长
5.释放信号量
up(&sema);
	释放信号量
	唤醒休眠的进程

down获取信号量，被阻塞
kill第二个进程id,无法杀死进程2
kill第一个进程id,2个进程都退出
第二个进程推出的原因？
1.第一个进程释放信号量
2.唤醒第二个进程
3.第二个进程就会检查是否收到信号，如果收到就处理信号

