linux系统编程
课程内容：
开发环境
内存管理
文件系统
进程管理
信号处理
进程通信
线程管理
线程同步
网络编程

一.Unix操作系统
1.美国AT&T，贝尔实验室
1971年
多用户，多任务，多处理器
商用

2.三个派系
1.system V
IBM AIX ....

2.berkley
freeBSD
metBSD
openBSD
...
Max OS X

3.linux
免费开源,商用服务器(RedHat)，桌面(Ubuntu)，嵌入式(Android)

二.linux操作系统
1.类Unix操作系统,免费开源
标志：企鹅

2.POSIX标准
IEEE和ISO制定
统一的系统编程接口规范
可移植

3.GPL
通用的公共许可证
允许对某些成果及其派生成果的重用，修改和复制，对所有人都是自由的，但是不能声明做了原始工作

4.版本
1)早期版本：0.01,0.02....1.0
2)旧计划：1.0-----2.6  A.B.C
A:主版本号,内核大幅度更新
B:次版本号,内核重大修改,奇数测试版,偶数稳定版
C:补丁序号,内核轻微修订
3)2003.12发布2.6.0以后，发布周期缩短A.B.C-D.E
www.kernel.org
D:构建次数,反应极其微小的更新
E:描述信息
rc/r：候选版本，后面的数字表示第几个候选版本,越大，越接近正式版

4.主流的linux发行版本
Ubuntu----大众化
Fedora----RedHat的桌面版,应用丰富
Debian----开放，自由，免费
RedHat----经典，应用丰富

三.GNU编译工具---GCC
1.支持多种语言
C，C++，Obeject-C，java,ADA.....
2.支持多种平台
Unix linux windows
3.构建过程
编辑--->预编译--->编译---->汇编---->链接
1)编辑 		vi hello.c
2)预编译	gcc -E hello.c -o hello.i
3)编译		gcc -S hello.i
4)汇编		gcc -c hello.s
5)链接		gcc hello.o -o hello

4.gcc版本
gcc -v

5.文件后缀
.h	C语言源代码的头文件
.c	预处理前的C语言源代码文件
.i	预处理后的C语言源代码文件
.s	汇编语言文件
.o	目标文件
.a	静态库文件
.so	动态库(共享库)文件

6.编译单个源程序
gcc [编译参数] 文件
-c:编译+汇编
-o:指定输出文件路径
-E:预处理
-S:编译，产生汇编文件
-g:生成调试信息
-Wall:产生尽可能多的警告
-Werror:将警告作为错误
-O0/O1/O2/O3:优化等级，缺省是O1，O0不做优化，某些操作系统还支持Os,相当于O2.5

7.编译多个源程序
先把每个源程序编译成目标文件，再将所有的目标文件连接成可执行程序
gcc [选项参数] a.c b.c c.c d.c
makefile/make

8.预处理指令
#define PAI 3.14
#undef PAI
#error 		产生错误,结束并终止预编译过程
#warning		产生警告,并不终止预编译过程
#line		指定行号
#pragma		为处理器提供额外信息

#pragma pack(1/2/4/8)
//对结构体变量，按1/2/4/8字节对齐/补齐

#123456<文件>
//如果<文件>比当前文件新，产生警告

#pragma GCC poison <标识>
//如果文件中出现<标识>,直接报错

9.预定义宏
义宏(已经定义好了的宏)
__LINE__ 	//所在行号
__BASE_FILE__	//正在被编译的源文件名
__FILE__		//所在的文件名
__FUNCTION__	//所在函数名
__func__		//同__FUNCTION__
__DATE__	//编译日期
__TIME__	//编译时间

10.环境变量
C_INCLUDE_PATH
CPATH
C头文件的附加搜索路径
LIBRARY_PATH
链接时库文件的搜索路径
LD_LIBRARY_PATH
运行时库文件的搜索路径                                                 
  
四.库
1.为什么需要库
二进制形式目标模块的包
a.o  |
b.o  |----abc.a----库
c.o  |
2.库的类型
1)静态库：扩展名.a，库中所封装的二进制代码,在链接阶段被复制到调用模块中
2)动态库：扩展名.so，库中所封装的二进制代码,在链接阶段并不复制到调用模块中，被嵌入到调用模块中的仅仅是被调用函数在共享库的地址，根据这个地址
动态执行共享库中的代码(windows下.dll)

3.构建静态库
1)编辑源程序: 		.c/.h
2)编译成目标文件:	gcc -c xxx.c ----> xxx.o
3)打包成静态库文件	ar -r libxxx.a xxx.o...

ar [选项] 静态库 目标文件列表
-r:将目标文件插入到静态库中，若已经存在则更新
-q:将目标文件追加到静态库的尾部
-d:将目标文件从静态库中删除
-t:列表显示静态库中目标文件
-x:将静态库展开为目标文件

nm命令：查看目标文件,库文件，可执行文件中的符号列表

4.调用静态库
gcc main.c libmath.a（直接调用法）
gcc main.c -lmath -L.（参数法）
-l:要编译的库名
-L:库的搜索路径
gcc main.c -lmath
export LIBRARY_PATH=$LIBRARY_PATH:.
为了使环境变量持久化
可以把export LIBRARY_PATH=$LIBRARY_PATH:.命令
添加到 ~/.bashrc
       ~/.bash_profile

