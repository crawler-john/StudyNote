一.线程(thread) - 做应用,在网络编程中必定应用
主流的操作系统都是多进程的,每个进程内部可以启动多线程完成代码的并行，每个线程内部也可以无限启动多线程

线程是轻量级的代码并行，不需要额外穿件过多的内存空间，而是共享所在进程的内存空间，线程只需要额外建立一个独立的栈

多线程之间互相独立,又互相影响
多线程可以大幅提高代码运行的效率

程序的运行必须拥有CPU和内存,内存可分，CPU不可分，如何实现并行？绝大多数操作系统都是采用CPU时间片实现CPU在多线程之间的轮换。CPU时间片是极短的一段CPU时间，拥有CPU时间片的线程都有机会运行。

针对时间点的并行是不存在的,针对时间段并行就是我们通常所说的代码并行

每个进程都有一个主线程,就是main函数,主线程结束，进程结束，同时会导致所有的线程结束

线程的编程：
Unix/Linux的线程相关函数都在pthread.h中，代码都在libpthread.so中.线程相关的函数都以pthread_开头。比如创建线程的函数：
pthread_create;
int pthread_create(pthread_t *id,pthread_attr_t *attr,
		void*(*fa)(void*),void *arg)
参数：
	id就是用来保存线程ID，attr是线程的属性，一般都给0即可(默认属性),fa是一个函数指针,给线程执行的代码,arg就是传给fa的参数,fa+arg指定了线程要执行的代码

返回值:
	成功返回0，失败返回错误代码，想查看错误信息,想查看错误信息可以使用strerror()进行转换

每个线程启动之后，只能执行一个函数，主线程执行main函数，其他线程执行自定义的函数，这些函数以并行的方式运行

线程之间的代码乱序执行，每个线程内部顺序执行,每个线程都会返回自己的错误码,而不会使用errno

pthread_join()函数可以让一个线程等待另外一个线程结束，并取得线程的返回值。
比如你在a线程调用了pthread_join(b,0)，线程a就会等待线程b结束，等待线程b结束后a才能继续运行

线程传参时,一定要注意保证地址的有效性,尤其是堆内存，也支持直接传值