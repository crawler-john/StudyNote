一.XSI IPC - 信号量集
信号量是一个计数器,用于控制访问共享资源的最大并行进程数。信号量集就是信号量的数组

信号量的工作方式
	设定一个初始计数,每进来一个进程计数-1，每完成一个进程计数+1，计数到0不允许进程访问，直到大于0才允许访问

信号量集的编程步骤
1.获取key
2.通过key获取信号量集的ID，semget()函数
3.用semctl()函数设置信号量的初始计数
4.用semop()进行加1和减1的操作
5.如果不再使用,用semctl()删除

int semget(key_t key, int nsems, int semflg);

semctl()函数设置信号量的初始值的用法
int semctl(int semid, int semnum, int cmd, ...);
参数：
	semid就是信号量集的ID
	semnum是信号量在信号量集中的下标
	cmd:如果是设置信号量的初始值,给SETVAL
	如果是设置信号量的初始值,第四个参数就给初始值count
返回值：
	成功返回0，失败返回-1
semctl(semid,semnum,SETVAL,count);
	
semop()对信号量进行操作
int semop(int semid, struct sembuf *sops, unsigned nsops);
参数：
	semid就是信号量集的ID
	sops是一个指针,指向一个信号量操作数组，信号量操作数组由sembuf结		构表示
		struct sembuf
		{
	   	unsigned short sem_num;//操作信号量的下标
           	short          sem_op;//操作方式:-1,+1
           	short          sem_flg;//0 等待 IPC_NOWAIT不等待
		};
	nsops表示使用数组中的哪一个操作


二.内存管理
STL：内存管理器
C++：new/delete  构造/析构
标C：malloc/calloc/realloc/free
POSIX:brk/sbrk
Linux:mmap/munmap			用户层
---------------------------------------
内核：kmalloc/vmalloc/get_free_page	系统层
硬件实现

三.进程映像
1.程序是保存在磁盘上的文件
2.运行程序时，需要把磁盘上的文件加载到内存中，形成进程
3.一个程序可以有多个进程
4.进程在内存中的布局就是进程映像
从低地址到高地址依次是
代码区(text):可执行指令,字面值常量,具有常属性且初始化的全局变量和静态变量。只读,理解：带有const的变量
数据区(data):不具备常属性且初始化的全局变量和静态变量。
BSS区(bss):未初始化的全局变量和静态变量,进程一加载此区就会被清0
堆区(heap):动态内存分配
栈区(stack):非静态局部变量，形参，实参
命令行参数和环境变量区
在堆区和栈区之间会留一段空隙，一方面为堆和栈的增长预留空间
同时共享库,共享内存，也会占用这个区域

虚拟内存和内存管理API





