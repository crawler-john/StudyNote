一.线程同步
1.互斥锁

2.信号量(信号灯)
信号量是一个计数器,用于控制访问共享资源的最大并行 线程/进程 的数量
工作原理：
	先设置一个最大值开始计数,每进来一个计数-1，没退出一个计数+1，
计数到0不允许 线程/进程 访问，除非计数大于0

信号量不属于线程的范畴,不在pthread.h,只是一个线程的计数辅助,头文件semaphore.h
信号量如果初始化为1，就相当于互斥量

信号量的编程步骤：
1.声明信号量：sem_t sem;
2.初始化信号量：sem_init()
int sem_init(sem_t *sem, int pshared, unsigned int value);
参数：
	sem就是信号量的地址
	pshared必须是0,0表示线程的计数，非0表示进程的计数(Linux没有提供		进程计数功能)
	value就是计数的初始值(最大计数)
3.计数-1：sem_wait(&sem);
4.访问共享资源
5.计数+1：sem_post(&sem);
6.释放信号量资源  sem_destroy(&sem); 


二.网络编程(非常重要)
网络常识：协议,IP地址,端口等等
网络编程的步骤和函数
基于TCP/UDP的开发

OSI七层模型：物理层,数据链路层，网络层，传输层,会话层，表现层，应用层
协议就是计算机进行信息交互时的规范。常见的协议：
http协议 - 超文本传输协议
ftp协议 - 文本传输协议
tcp协议 - 传输控制协议(传输层)
udp协议 - 用户数据报协议(传输层)
ip协议 - 网络层协议
....

协议簇就是多个协议的集合,协议簇一般都以核心协议命名，也有非官方的叫法叫协议族

IP地址是网络中计算机的唯一标识,本质是一个整数，IP地址早期都是32位的，IPV4。后来推出了IPV6(128位)。主流还是IPV4，IP地址有2种表示方式，点分十进制和十六进制
点分十进制就是每8位作为一个整数(0-255),分4段，中间用.隔开
十六进制就是把32位2进制直接转换成8位16进制
计算机使用16进制，人更习惯点分十进制
IP地址其实绑定的是网卡，每个网卡在出厂时都有一个唯一的物理地址(MAC地址)，IP地址其实就是为了找到网卡的物理地址，找到网卡就找到了计算机

IP地址分为A/B/C/D/E，系统预留了127.0.0.1，作为本机的IP地址

关于网络命令
ipconfig - windows dos命令，查看ip地址
ifconfig - Unix/Linux查看ip的命令
ping ip地址 - 测试IP地址是否可以访问

子网掩码 可以用来 判断IP 是否属于同一网段
IP地址：166.111.160.1
	166.111.161.55
子网掩码：255.255.254.0

用IP地址和子网掩码做位与运算
166.111.160.1
255.255.254.0
----------------
166.111.160.0

166.111.161.55
255.255.254.0
----------------
166.111.160.0  -------->结果相同，同一网段

IP地址可以让我们找到计算机。但没有找到对应的进程。在网络中，端口就用来代表计算机内部的一个进程，有了IP地址和端口号就可以进行网络通信。IP地址+端口号的网络编程就是socket编程

端口号也是一个整数short,0-65535,其中
0-1023不要用,系统占用了其中大多数的端口
48000以后也不要用,不稳定，系统随时会征用。有些软件也会抢占一些端口，这些端口也不要使用
Oracle数据库占用1521端口，8080端口
http端口：80
ftp端口：21
telnet端口：23

字节顺序：整型是4个字节，有些计算机从低字节到高字节存储(小端格式)，有些计算机从高位到低位存储(大端格式)

本机的字节顺序无法确定，但是网络中的字节顺序是确定的，编程时用网络字节顺序传输，到了本地以后在转换成本地格式


Unix/Linux网络编程的实现
有固定的套路，但是有一些不方便的函数，结构
socket编程(套接字)
socket通信包含一对一，一对多
先来研究一下一对一(一对多的模式也一样)
socket编程早期是用来实现进程间通信(IPC),现在主要用于网络，编程代码改变不多

1.本地通信(IPC)
1.1服务器的编程步骤
1)使用socket()函数，创建一个socket
int socket(int domain, int type, int protocol);
参数：
	domain叫域，用于选择协议簇
		AF_UNIX/AF_LOCAL/AF_FILE:本地通信IPC
		AF_INET：IPV4的网络通信
		AF_INET6：IPV6的网络通信
		其中AF换成PF效果一样
	type选择通信的类型(选协议)
		SOCK_STREAM：数据流(TCP协议)
		SOCK_DGRAM：数据报(UDP协议)
	protocol本来应该选择协议，但实际上没什么用，协议已经被前两个参		数决定，给0就可以了

返回值：
	成功返回socket描述符，类似于文件描述符，失败返回-1
注：读写函数可以操作socket描述符

2）准备通信地址(IPC是文件，网络就是ip/端口)
系统提供三种通信地址，就是三个结构体
a)struct sockaddr 本身不存数据，作为函数的参数
b)struct sockaddr_un 存本地通信的通信地址
c)struct sockaddr_in 存网络通信的通信地址

#include <sys/un.h>(本地)
struct sockaddr_un
{
	int sun_family;//协议簇,和socket()保持一致
	char sun_path[];//socket文件的路径
};

#include <sys/in.h>（网络）
struct sockaddr_in
{
	int sin_family;//协议簇,和socket()保持一致
	short sin_port;//端口号
	struct in_addr sin_addr;//IP地址
};

3.绑定socket描述符和通信地址
int bind(int sockfd, const struct sockaddr *addr,
                socklen_t addrlen);
参数:
	sockfd就是socket描述符
	addr就是通信地址
	addrlen就是通信地址的长度(sizeof)
返回值：
	成功返回0，失败返回-1

4.通信
read()
write()

5.关闭socket描述符
close()

1.2客户端的编程
和服务器的编程步骤一样,除了第三步把bind换成connect()，但是函数的参数不变
int connect(int sockfd, const struct sockaddr *addr,
                   socklen_t addrlen);
bind()是服务器绑定通信地址，开放端口
connect()是客户端连接服务器,通信地址要使用服务器的地址

作业：使用网络通信实现socket（127.0.0.1）端口(8000)
