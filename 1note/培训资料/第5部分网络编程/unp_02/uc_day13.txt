系统编程
1.开发环境
2.库
3.文件I/O
4.内存管理
5.进程
6.进程间通信
7.线程和线程同步

网络编程
socket网络通信的实现


一对多的网络编程模型
TCP一对多
使用2种socket描述符，其中一种负责等待客户端的连接，当有客户端连接时,启动一个新的描述符负责信息交互

TCP协议是一个基于连接(有连接)的协议,全程保持服务器和客户端的连接,会重发一切错误数据，因此TCP可以保证数据的完整和有效。缺点是当客户端非常多的时候，会降低效率

UDP协议是一个不基于连接(无连接)的协议，发送数据时连接，发送完就断开，而且不考虑数据是否被接受，UDP的效率比TCP，UDP不保证数据的有效和完整，QQ/MSN都是采用UDP协议

TCP一对多的编程步骤
服务器端：
1.socket()，得到第一类的socket描述符
2.准备通信地址 struct sockaddr_in
3.绑定bind(),
4.监听客户端的连接,函数listen()
5.等待客户端的连接,函数accept()，返回新的socket描述符,用于信息交互（如果没有客户端连接会阻塞）
6.利用第五步返回的描述符进行通信
7.close（）关闭两个文件描述符

客户端的编程和一对一是一样的
int listen(int sockfd, int backlog);
设置当多个客户端同时连接时，需要把多余的客户端存入队列，backlog就是队列的最大长度
参数：
	sockfd就是负责等待客户端连接的socket描述符
	backlog最多同时连接的客户端个数
返回值:
	成功为0，失败-1

int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
参数：
	sockfd就是负责等待客户端连接的socket描述符
	addr用来存放客户端的通信地址
	addrlen是一个传入传出参数。先传入addr的长度，在传出接收到的客户		端的通信地址的真实长度
返回值：
	成功返回新的socket描述符(套接字),失败返回-1
