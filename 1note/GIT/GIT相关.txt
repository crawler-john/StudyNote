1.安装GIT
	1>在Linux上安装
		sudo apt-get install git
	2>在windows上进行安装
		https://git-for-windows.github.io/下载
		安装完成后需要进行一步设置
		$ git config --global user.name "Your Name"
		$ git config --global user.email "email@example.com"
		注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
2.创建版本库
	1>进入相应的目录(需要建立仓库的目录)
	2> 通过git init命令把这个目录改变成可以管理的仓库
	3>第一步，用命令git add告诉Git，把文件添加到仓库：
	$ git add readme.txt	
	第二步，用命令git commit告诉Git，把文件提交到仓库：
	$ git commit -m "wrote a readme file"
	[master (root-commit) cb926e7] wrote a readme file
	1 file changed, 2 insertions(+)
 	create mode 100644 readme.txt
	总结：初始化一个Git仓库，使用git init命令。
		添加文件到Git仓库，分两步：
		第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
		第二步，使用命令git commit，完成。

3.查看状态
	git status可以掌握现在仓库的状态。
	git diff 查看变化
	要随时掌握工作区的状态，使用git status命令。
	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

4.版本回滚	
	git log命令显示从最近到最远的提交日志
	如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
	首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	git reset --hard 3628164（未来的commit_id）
	Git提供了一个命令git reflog用来记录你的每一次命令
    现在总结一下：
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
5.工作区和暂存区
	给 git commit 加上 -a 选项可以跳过暂存区，直接存到版本库
	如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changes not staged for commit” 部分（也就是 未暂存清单）看到：
	然后再运行 git rm 记录此次移除文件的操作：
		$ git rm PROJECTS.md
	下一次提交时，该文件就不再纳入版本管理了。 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母）。
	另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。
		$ git rm --cached README
	git rm 命令后面可以列出文件或者目录的名字，也可以使用 glob 模式。 比方说：$ git rm log/\*.log
	工作区（Working Directory）:就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区
	版本库（Repository）:	工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
		Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
	前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：	
		第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
		第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
6.管理修改	Git跟踪管理的是修改
	第一次修改 -> git add -> 第二次修改 -> git commit
	你看，我们前面讲了，Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。
7.撤销修改
	命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
		一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
		一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
		总之，就是让这个文件回到最近一次git commit或git add时的状态。
	用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
	总结：
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

8.删除文件
	Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：
		现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：git rm test.txt
		另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：$ git checkout -- test.txt
		git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”

9.远程仓库
	第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
	$ ssh-keygen -t rsa -C "youremail@example.com"
	如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
	然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
10.添加远程仓库
	首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
	在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
	目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
	现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：
	$ git remote add origin git@github.com:crawler-john/facebook_university.git	请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。
	添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
	把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。git push -u origin master
	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。git push origin master
	总结：
		要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
		关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
		此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
11.从远程仓库克隆
	远程库已经准备好了，下一步是用命令git clone克隆一个本地库：
		git clone git@github.com:michaelliao/gitskills.git	
		git clone https://github.com/libgit2/libgit2 mylibgit (更改项目的名字)
	总结：
		要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
		Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
12.分支管理
	分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。
	现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。

13.创建与合并分支
	首先，我们创建dev分支，然后切换到dev分支：
		git checkout -b dev	git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：	$ git branch dev
													$ git checkout dev
	然后，用git branch命令查看当前分支：$ git branch		
		git branch命令会列出所有分支，当前分支前面会标一个*号。
		然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行
	然后提交：$ git add readme.txt 
		  $ git commit -m "branch test"
	现在，dev分支的工作完成，我们就可以切换回master分支：
		$ git checkout master
	切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变
	现在，我们把dev分支的工作成果合并到master分支上：$ git merge dev
		git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。
		注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
		当然，也不是每次合并都能Fast-forward，我们后面会将其他方式的合并。
	合并完成后，就可以放心地删除dev分支了：$ git branch -d dev
	删除后，查看branch，就只剩下master分支了：$ git branch

	总结
		Git鼓励大量使用分支：
			查看分支：git branch
			创建分支：git branch <name>
			切换分支：git checkout <name>
			创建+切换分支：git checkout -b <name>
			合并某分支到当前分支：git merge <name>
			删除分支：git branch -d <name>
14.解决冲突
	准备新的feature1分支，继续我们的新分支开发：
		$ git checkout -b feature1
	修改readme.txt最后一行，改为：
		Creating a new branch is quick AND simple.
	在feature1分支上提交：
		$ git add readme.txt 
		$ git commit -m "AND simple"
	切换到master分支：
		$ git checkout master
	Git还会自动提示我们当前master分支比远程的master分支要超前1个提交。
		在master分支上把readme.txt文件的最后一行改为	
			Creating a new branch is quick & simple.
	提交：
		$ git add readme.txt 
		$ git commit -m "& simple"
	现在，master分支和feature1分支各自都分别有新的提交
	这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：
		$ git merge feature1
		Auto-merging readme.txt
		CONFLICT (content): Merge conflict in readme.txt
		Automatic merge failed; fix conflicts and then commit the result.
	果然冲突了！Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交。git status也可以告诉我们冲突的文件
	我们可以直接查看readme.txt的内容：发现两个分支都在
	Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存：（保存为其中一个	）
	再提交：
		$ git add readme.txt 
		$ git commit -m "conflict fixed"
	用带参数的git log也可以看到分支的合并情况：	
		$ git log --graph --pretty=oneline --abbrev-commit
	最后，删除feature1分支：
		$ git branch -d feature1
	总结：
		当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
		用git log --graph命令可以看到分支合并图。
15.分支管理策略
	合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息
	如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

	下面我们实战一下--no-ff方式的git merge
		首先，仍然创建并切换dev分支：$ git checkout -b dev
		修改readme.txt文件，并提交一个新的commit：
			$ git add readme.txt 
			$ git commit -m "add merge"
	现在，我们切换回master：git checkout master
	准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
		$ git merge --no-ff -m "merge with no-ff" dev	
	因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
		合并后，我们用git log看看分支历史：
		$ git log --graph --pretty=oneline --abbrev-commit
	
	在实际开发中，我们应该按照几个基本原则进行分支管理：
			首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
			那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
			你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
	总结：
		Git分支十分强大，在团队开发中应该充分应用。
		合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
16.Bug分支
	Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：$ git stash
	现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。
	首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：
		$ git checkout master
		$ git checkout -b issue-101
	现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交：
		$ git add readme.txt 
		$ git commit -m "fix bug 101"
	修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：
		$ git checkout master
		$ git merge --no-ff -m "merged bug fix 101" issue-101
		$ git branch -d issue-101
	接着回到dev分支干活了！
		$ git checkout dev
		$ git status
	刚才的工作现场存到哪去了？用git stash list命令看看：
	工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
		一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
		另一种方式是用git stash pop，恢复的同时把stash内容也删了：
	你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
		$ git stash apply stash@{0}
	总结：
		修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
		当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
17.Feature分支
	添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支
		$ git checkout -b feature-vulcan
		$ git add vulcan.py
		$ git status
		$ git commit -m "add feature vulcan"
	切回dev，准备合并：
		$ git checkout dev
	一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。

	但是，就在此时，接到上级命令，因经费不足，新功能必须取消！
		虽然白干了，但是这个分支还是必须就地销毁：
		$ git branch -d feature-vulcan （无法销毁，提示还没有合并）
		需要使用命令git branch -D feature-vulcan		
	总结：
		开发一个新feature，最好新建一个分支；
		如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
18.多人协作
	当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
	要查看远程库的信息，用git remote：
		git remote 或者，用git remote -v显示更详细的信息：上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。
	推送分支
		推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
		$ git push origin master
		如果要推送其他分支，比如dev，就改成：
		$ git push origin dev
		但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
			master分支是主分支，因此要时刻与远程同步；
			dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
			bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
			feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
	抓取分支
		多人协作时，大家都会往master和dev分支上推送各自的修改。
		现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：
			$ git clone git@github.com:michaelliao/learngit.git
		当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用git branch命令看看：
			$ git branch
		现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
			$ git checkout -b dev origin/dev
		现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程
			$ git commit -m "add /usr/bin/env"
			$ git push origin dev
		你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：
			$ git add hello.py 
			$ git commit -m "add coding: utf-8"
			$ git push origin dev
		推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
			$ git pull
		git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
			$ git branch --set-upstream dev origin/dev
		再pull：
			$ git pull
		这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：
			$ git commit -m "merge & fix hello.py"
			$ git push origin dev
		因此，多人协作的工作模式通常是这样：
			首先，可以试图用git push origin branch-name推送自己的修改；
			如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
			如果合并有冲突，则解决冲突，并在本地提交；
			没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
			如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
			这就是多人协作的工作模式，一旦熟悉了，就非常简单。
		小结：
			查看远程库信息，使用git remote -v；
			本地新建的分支如果不推送到远程，对其他人就是不可见的；
			从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交
			在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
			建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
			从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
19.标签管理
	发布一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。
	Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。
20.创建标签	
	在Git中打标签非常简单，首先，切换到需要打标签的分支上：
		$ git branch
			* dev
  			master
		$ git checkout master
			Switched to branch 'master'
	然后，敲命令git tag <name>就可以打一个新标签：
		$ git tag v1.0
	可以用命令git tag查看所有标签：
		$ git tag
			v1.0
	默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
		方法是找到历史提交的commit id，然后打上就可以了：
		$ git log --pretty=oneline --abbrev-commit
	比方说要对add merge这次提交打标签，它对应的commit id是6224937，敲入命令：
		$ git tag v0.9 6224937
	再用命令git tag查看标签：
		$ git tag
			v0.9
			v1.0	
	注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息：
		$ git show v0.9
	还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
		$ git tag -a v0.1 -m "version 0.1 released" 3628164
	用命令git show <tagname>可以看到说明文字：
		$ git show v0.1
	还可以通过-s用私钥签名一个标签：
		$ git tag -s v0.2 -m "signed version 0.2 released" fec145a
	签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错
	如果报错，请参考GnuPG帮助文档配置Key。
		用命令git show <tagname>可以看到PGP签名信息：
			$ git show v0.2
	小结
		命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
		git tag -a <tagname> -m "blablabla..."可以指定标签信息；
		git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
		命令git tag可以查看所有标签。
21.操作标签
	如果标签打错了，也可以删除：
		$ git tag -d v0.1
	因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
		如果要推送某个标签到远程，使用命令git push origin <tagname>：
		$ git push origin v1.0
	或者，一次性推送全部尚未推送到远程的本地标签：
		$ git push origin --tags
	如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
		$ git tag -d v0.9
	然后，从远程删除。删除命令也是push，但是格式如下：
		$ git push origin :refs/tags/v0.9
	小结
		命令git push origin <tagname>可以推送一个本地标签；
		命令git push origin --tags可以推送全部未推送过的本地标签；
		命令git tag -d <tagname>可以删除一个本地标签；
		命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
22.使用github
	如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：
		git clone git@github.com:michaelliao/bootstrap.git
	一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。
		Bootstrap的官方仓库twbs/bootstrap、你在GitHub上克隆的仓库my/bootstrap，以及你自己克隆到本地电脑的仓库。
	如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。
		如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。
		如果你没能力修改bootstrap，但又想要试一把pull request，那就Fork一下我的仓库：https://github.com/michaelliao/learngit，创建一个your-github-id.txt的文本文件，写点自己学习Git的心得，然后推送一个pull request给我。
	小结
		在GitHub上，可以任意Fork开源仓库；	
		自己拥有Fork后的仓库的读写权限；
		可以推送pull request给官方仓库来贡献代码。
23.自定义git
	让Git显示颜色，会让命令输出看起来更醒目：
		$ git config --global color.ui true
24.忽略特殊文件
	在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件
	不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore
	忽略文件的原则是：
			忽略操作系统自动生成的文件，比如缩略图等；
			忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
			忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
	加上你自己定义的文件，最终得到一个完整的.gitignore文件，内容如下：
		# Windows:
			Thumbs.db
			ehthumbs.db
			Desktop.ini
	最后一步就是把.gitignore也提交到Git，就完成了！当然检验.gitignore的标准是git status命令是不是说working directory clean。
	使用Windows的童鞋注意了，如果你在资源管理器里新建一个.gitignore文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore了。
	小结
		忽略某些文件时，需要编写.gitignore；
		.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
25.配置别名
	如果敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。
		我们只需要敲一行命令，告诉Git，以后st就表示status：
		$ git config --global alias.st status
	当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：
		$ git config --global alias.co checkout
		$ git config --global alias.ci commit
		$ git config --global alias.br branch
	--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。
	在撤销修改一节中，我们知道，命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：
			$ git config --global alias.unstage 'reset HEAD'
		当你敲入命令：
			$ git unstage test.py
		实际上Git执行的是：
			$ git reset HEAD test.py
	配置一个git last，让其显示最后一次提交信息：
		$ git config --global alias.last 'log -1'
	这样，用git last就能显示最近一次的提交：
		$ git last
	甚至还有人丧心病狂地把lg配置成了：
		git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
	配置文件
		配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
		配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：
			cat .git/config 
	别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
	而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：
		cat .gitconfig
	配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。
	小结
		给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。
26.搭建GIT服务器
	GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。
	搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。
	假设你已经有sudo权限的用户账号，下面，正式开始安装。
		第一步，安装git：$ sudo apt-get install git
		第二步，创建一个git用户，用来运行git服务：$ sudo adduser git
		第三步，创建证书登录：
			收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
		第四步，初始化Git仓库：
			先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
			$ sudo git init --bare sample.git
			Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
			$ sudo chown -R git:git sample.git
		第五步，禁用shell登录：
			出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
			git:x:1001:1001:,,,:/home/git:/bin/bash   改为： git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
		这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。
		第六步，克隆远程仓库：
			现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
			$ git clone git@server:/srv/sample.git
			Cloning into 'sample'...
			warning: You appear to have cloned an empty repository.
			剩下的推送就简单了。
	管理公钥
		如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。
	管理权限
		有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。
	小结
		搭建Git服务器非常简单，通常10分钟即可完成；
		要方便管理公钥，用Gitosis；
		要像SVN那样变态地控制权限，用Gitolite。



在线中文版：http://progit.org/book/zh/， 英文版：http://progit.org/book/

http://download.eclipse.org/egit/updates
http://blog.csdn.net/zhangdaiscott/article/details/16939165s



当你看到 Git 的 mv 命令时一定会困惑不已。 要在 Git 中对文件改名，可以这么做：
	$ git mv file_from file_to
其实，运行 git mv 就相当于运行了下面三条命令：
	$ mv README.md README
	$ git rm README.md
	$ git add README
回顾下提交历史. 完成这个任务最简单而又有效的工具是 git log 命令。
	一个常用的选项是 -p，用来显示每次提交的内容差异。 你也可以加上 -2 来仅显示最近两次提交：
	$ git log -p -2
	如果你想看到每次提交的简略的统计信息，你可以使用 --stat 选项：
	$ git log --stat
	另外一个常用的选项是 --pretty。 这个选项可以指定使用不同于默认格式的方式展示提交历史。
		oneline 将每个提交放在一行显示
		short，full 和 fuller 可以用，展示的信息或多或少有些不同
		 format，可以定制要显示的记录格式$ git log --pretty=format:"%h - %an, %ar : %s"
	当 oneline 或 format 与另一个 log 选项 --graph 结合使用时尤其有用。 这个选项添加了一些ASCII字符串来形象地展示你的分支、合并历史：
		$ git log --pretty=format:"%h %s" --graph
可以运行带有 --amend 选项的提交命令尝试重新提交：
		$ git commit --amend
你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：
		$ git commit -m 'initial commit'
		$ git add forgotten_file
		$ git commit --amend
我们可以这样来取消暂存 CONTRIBUTING.md 文件：
	$ git reset HEAD CONTRIBUTING.md
非常清楚地告诉了你如何撤消之前所做的修改。 让我们来按照提示执行：
	$ git checkout -- CONTRIBUTING.md