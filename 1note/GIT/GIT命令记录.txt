1.1.Git的安装
	下载地址：http://git-scm.com/download/win next next就行
1.2.Git初始化 就是与自己的账号关联	
	用户信息：当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址
		$ git config --global user.name "John Doe"
		$ git config --global user.email johndoe@example.com
	检查配置信息
		$ git config --list 查看所有信息
		$ git config user.name	查看单个信息
1.3.获取帮助
	若你使用 Git 时需要获取帮助，有三种方法可以找到 Git 命令的使用手册：
		$ git help <verb>	例如$ git help config
		$ git <verb> --help
		$ man git-<verb>

2.1获取Git仓库
	获取 Git 仓库
		在现有目录中初始化仓库 $ git init
		如果目录不为空  可以像下面一样提交
			$ git add *.c
			$ git add LICENSE
			$ git commit -m 'initial project version'
	克隆现有的仓库	格式git clone [url]
		$ git clone https://github.com/libgit2/libgit2
		$ git clone https://github.com/libgit2/libgit2 mylibgit 带重命名的
		Git 支持多种数据传输协议。 上面的例子使用的是 https:// 协议，不过你也可以使用 git:// 协议或者使用 SSH 传输协议
2.2记录每次更新到仓库
	你工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪
	检查当前文件状态	：查看哪些文件处于什么状态，可以用 git status 命令
	跟踪新文件		：使用命令 git add 开始跟踪一个文件 （将文件放入暂存区）
	暂存已修改文件		：需要重新添加到暂存区
	状态简览 		：使用 git status -s 命令或 git status --short 命令
		M README
		MM Rakefile
		A  lib/git.rb
		M  lib/simplegit.rb
		?? LICENSE.txt
		新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。 你可能注意到了 M 有两个可以出现的位置，出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区。
	忽略文件		:创建一个名为 .gitignore 的文件，列出要忽略的文件模式
		$ cat .gitignore
		*.[oa]
		*~
		文件 .gitignore 的格式规范如下：
    			所有空行或者以 ＃ 开头的行都会被 Git 忽略。
    			可以使用标准的 glob 模式匹配。
    			匹配模式可以以（/）开头防止递归。
    			匹配模式可以以（/）结尾指定目录。
    			要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。
		GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表，你可以在 https://github.com/github/gitignore 找到它.
	查看已暂存和未暂存的修改	:查看尚未暂存的文件更新了哪些部分，不加参数直接输入 git diff
		git diff 看暂存前后的变化
		git diff --cached 查看已经暂存起来的变化
	提交更新	git commit
		你也可以在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行
		例如：git commit -m "Story 182: Fix benchmarks for speed"
	跳过使用暂存区域	git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤
	移除文件	要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交
			可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。
			强制删除选项 -f
			我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中 	git rm --cached README
	移动文件
		在 Git 中对文件改名，可以这么做：	$ git mv file_from file_to
		git mv 就相当于运行了下面三条命令：
			$ mv README.md README
			$ git rm README.md
			$ git add README
2.3 查看提交历史
	在此项目中运行 git log
		默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面
	git log 有许多选项可以帮助你搜寻你所要找的提交， 接下来我们介绍些最常用的。
		一个常用的选项是 -p，用来显示每次提交的内容差异。 你也可以加上 -2 来仅显示最近两次提交：$ git log -p -2
		如果你想看到每次提交的简略的统计信息，你可以使用 --stat 选项：$ git log --stat
		另外一个常用的选项是 --pretty。 这个选项可以指定使用不同于默认格式的方式展示提交历史。
			比如用 oneline 将每个提交放在一行显示，查看的提交数很大时非常有用。 另外还有 short，full 和 fuller 可以用
			但最有意思的是 format，可以定制要显示的记录格式。
		当 oneline 或 format 与另一个 log 选项 --graph 结合使用时尤其有用。 这个选项添加了一些ASCII字符串来形象地展示你的分支、合并历史：
			$ git log --pretty=format:"%h %s" --graph
	限制输出长度
		-<n> 选项的写法，其中的 n 可以是任何整数，表示仅显示最近的若干条提交。
		--since 和 --until 也很有用。 例如，下面的命令列出所有最近两周内的提交：
			$ git log --since=2.weeks
2.4 撤消操作
	注意，有些撤消操作是不可逆的。 这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个地方之一。
	有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 --amend 选项的提交命令尝试重新提交：
		$ git commit --amend
	取消暂存的文件
		git reset HEAD <file>... 来取消暂存
	撤消对文件的修改
		git checkout -- CONTRIBUTING.md
		git checkout -- [file] 是一个危险的命令，这很重要。 你对那个文件做的任何修改都会消失 - 你只是拷贝了另一个文件来覆盖它。 除非你确实清楚不想要那个文件了，否则不要使用这个命令。
2.5 远程仓库的使用	
	查看远程仓库
		如果想查看你已经配置的远程仓库服务器，可以运行 git remote 命令。 它会列出你指定的每一个远程服务器的简写。
		你也可以指定选项 -v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。
			$ git remote -v
	添加远程仓库
		运行 git remote add <shortname> <url> 添加一个新的远程 Git 仓库，同时指定一个你可以轻松引用的简写
			git remote add pb https://github.com/paulboone/ticgit
		你想拉取 Paul 的仓库中有但你没有的信息，可以运行 git fetch pb
	从远程仓库中抓取与拉取
		从远程仓库中获得数据，可以执行：	$ git fetch [remote-name]
		使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作。
		如果你有一个分支设置为跟踪一个远程分支（阅读下一节与 Git 分支 了解更多信息），可以使用 git pull 命令来自动的抓取然后合并远程分支到当前分支。
	推送到远程仓库
		git push [remote-name] [branch-name]。 当你想要将 master 分支推送到 origin 服务器时（再次说明，克隆时通常会自动帮你设置好那两个名字），那么运行这个命令就可以将你所做的备份到服务器：
			$ git push origin master
	查看远程仓库
		想要查看某一个远程仓库的更多信息，可以使用 git remote show [remote-name] 命令
	远程仓库的移除与重命名
		如果想要重命名引用的名字可以运行 git remote rename 去修改一个远程仓库的简写名。$ git remote rename pb paul
2.6  打标签	Git 可以给历史中的某一个提交打上标签，以示重要
	列出标签
		 Git 中列出已有的标签是非常简单直观的。 只需要输入 git tag
	创建标签
		Git 使用两种主要类型的标签：轻量标签（lightweight）与附注标签（annotated）。
		一个轻量标签很像一个不会改变的分支 - 它只是一个特定提交的引用。
		附注标签是存储在 Git 数据库中的一个完整对象。 它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息
	附注标签
		 Git 中创建一个附注标签是很简单的。 最简单的方式是当你在运行 tag 命令时指定 -a 选项，-m 选项指定了一条将会存储在标签中的信息。：
			$ git tag -a v1.4 -m 'my version 1.4'
		通过使用 git show 命令可以看到标签信息与对应的提交信息：$ git show v1.4
			输出显示了打标签者的信息、打标签的日期时间、附注信息，然后显示具体的提交信息。
	轻量标签
		创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：
			$ git tag v1.4-lw
	后期打标签
		你也可以对过去的提交打标签。 假设提交历史是这样的：
			$ git log --pretty=oneline
		要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）:
			$ git tag -a v1.2 9fceb02
	共享标签
		默认情况下，git push 命令并不会传送标签到远程仓库服务器上。创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样 - 你可以运行 git push origin [tagname]。
		如果想要一次性推送很多标签，也可以使用带有 --tags 选项的 git push 命令。
	检出标签
		如果你想要工作目录与仓库中特定的标签版本完全一样，可以使用 git checkout -b [branchname] [tagname] 在特定的标签上创建一个新分支：
			$ git checkout -b version2 v2.0.0
		，如果在这之后又进行了一次提交，version2 分支会因为改动向前移动了，那么 version2 分支就会和 v2.0.0 标签稍微有些不同，这时就应该当心了。
2.7 Git 别名
	Git 别名
		Git 并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的 Git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。
		例如：	$ git config --global alias.co checkout
			$ git config --global alias.br branch
			$ git config --global alias.ci commit
			$ git config --global alias.st status
		这意味着，当要输入 git commit时，只需要输入 git ci。
		为了解决取消暂存文件的易用性问题，可以向 Git 中添加你自己的取消暂存别名：
			git config --global alias.unstage 'reset HEAD --'
		 git config --global alias.last 'log -1 HEAD'
			这样，可以轻松地看到最后一次提交：	
3.1 分支简介
	分支创建	git branch 命令：
		$ git branch testing
		你可以简单地使用 git log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 --decorate。
		$ git log --oneline --decorate
	分支切换
		要切换到一个已存在的分支，你需要使用 git checkout 命令。
			$ git checkout testing		这样 HEAD 就指向 testing 分支了。
3.2  分支的新建与合并
	新建分支
		想要新建一个分支并同时切换到那个分支上，你可以运行一个带有 -b 参数的 git checkout 命令：
			$ git checkout -b iss53
		然后将其合并回你的 master 分支来部署到线上。 你可以使用 git merge 命令来达到上述目的：
			$ git checkout master
			$ git merge hotfix
			你可以使用带 -d 选项的 git branch 命令来删除分支：
				$ git branch -d hotfix
	分支的合并
		只需要检出到你想合并入的分支，然后运行 git merge 命令：
			$ git checkout master
			Switched to branch 'master'
			$ git merge iss53
	遇到冲突时的分支合并
		对两个分支都对同一个文件进行修改过的合并会发生冲突。
		此时 Git 做了合并，但是没有自动地创建一个新的合并提交。 Git 会暂停下来，等待你去解决合并产生的冲突。
		任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 
		如果你想使用图形化工具来解决冲突，你可以运行 git mergetool，该命令会为你启动一个合适的可视化合并工具，并带领你一步一步解决这些冲突：
			$ git mergetool
3.3 分支管理
	分支管理
		git branch 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表：
			$ git branch
			注意 master 分支前的 * 字符：它代表现在检出的那一个分支（也就是说，当前 HEAD 指针所指向的分支）。
		 如果需要查看每一个分支的最后一次提交，可以运行 git branch -v 命令：$ git branch -v
		--merged 与 --no-merged 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。 $ git branch --merged
		因为之前已经合并了 iss53 分支，所以现在看到它在列表中。 在这个列表中分支名字前没有 * 号的分支通常可以使用 git branch -d 删除掉；你已经将它们的工作整合到了另一个分支，所以并不会失去任何东西。
		查看所有包含未合并工作的分支，可以运行 git branch --no-merged：
			$ git branch --no-merged
			这里显示了其他分支。 因为它包含了还未合并的工作，尝试使用 git branch -d 命令删除它时会失败
3.4分支开发工作流
	长期分支
		许多使用 Git 的开发者都喜欢使用这种方式来工作，比如只在 master 分支上保留完全稳定的代码――有可能仅仅是已经发布或即将发布的代码。 他们还有一些名为 develop 或者 next 的平行分支，被用来做后续开发或者测试稳定性――这些分支不必保持绝对稳定，但是一旦达到稳定状态，它们就可以被合并入 master 分支了。 这样，在确保这些已完成的特性分支（短期分支，比如之前的 iss53 分支）能够通过所有测试，并且不会引入更多 bug 之后，就可以合并入主干分支中，等待下一次的发布。
		一些大型项目还有一个 proposed（建议） 或 pu: proposed updates（建议更新）分支，它可能因包含一些不成熟的内容而不能进入 next 或者 master 分支。 这么做的目的是使你的分支具有不同级别的稳定性；当它们具有一定程度的稳定性后，再把它们合并入具有更高级别稳定性的分支中。
	特性分支
		特性分支对任何规模的项目都适用。 特性分支是一种短期分支，它被用来实现单一特性或其相关工作。
3.5 远程分支
	拉取
		当 git fetch 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。 然而，有一个命令叫作 git pull 在大多数情况下它的含义是一个 git fetch 紧接着一个 git merge 命令。 如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过 clone 或 checkout 命令为你创建的，git pull 都会查找当前分支所跟踪的服务器与分支，从服务器上抓取数据然后尝试合并入那个远程分支。
		由于 git pull 的魔法经常令人困惑所以通常单独显式地使用 fetch 与 merge 命令会更好一些。
	删除远程分支
		假设你已经通过远程分支做完所有的工作了 - 也就是说你和你的协作者已经完成了一个特性并且将其合并到了远程仓库的 master 分支（或任何其他稳定代码分支）。 可以运行带有 --delete 选项的 git push 命令来删除一个远程分支。 如果想要从服务器上删除 serverfix 分支，运行下面的命令：
			$ git push origin --delete serverfix
3.6  变基
	变基	 在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase
	变基的基本操作
		你可以提取在 C4 中引入的补丁和修改，然后在 C3 的基础上再应用一次。 在 Git 中，这种操作就叫做 变基。你可以使用 rebase 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。
			$ git checkout experiment
			$ git rebase master
		它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master）的最近共同祖先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。	