第四章 sed命令和awk编程
	本章介绍Linux/UNIX系统中两种功能强大的文本处理工具：sed和awk。
	
4.1 sed命令基本用法
	sed是一个非交互式文本编辑器，它可对文本文件和标准输入进行编辑，标准输入可以是来自键盘输入、文件重定向、字符串、变量、甚至是来自管道的文本。
	sed适用于以下三个场合：
		1.编辑相对交互式文本标记器而言太大大文件。
		2.编辑命令太复杂，在交互式文本标记器中难以输入的情况。
		3.对文件扫描一遍，但是需要执行多个编辑函数的情况。
	sed只是对缓冲区中原始文件的副本进行编辑，并不标记原始的文件。因此，如果需要保存改动内容，需要将输入重定向到另一个文件，可以使用下面格式的命令：
		sed ‘sed命令’ input-file > result-file
	调用sed有三种方式，三种方式的命令格式如下：
		1.在Shell命令行输入命令调用sed，格式如
			sed 【选项】 ‘sed命令’ 输入文件
		2.将sed命令插入脚本文件后，然后通过sed命令调用它，格式为：
			sed 【选项】 -f sed脚本文件 输入文件
		3.将sed命令插入脚本文件后，最常用的方法是设置该脚本文件为可执行，然后直接指向该脚本文件，格式为：
			./sed脚本文件 输入文件
	sed命令选项及其意义
		-n		不打印所有行到标准输出
		-e		表示将下一个字符串解析为sed编辑命令，如果只传递一个编辑命令给sed，-e选项可以忽略
		-f 		表示正在调用sed脚本文件
	sed提供以下两种方式定位文本：
		1.使用行号，指定一行，或指定行号范围。
		2.使用正则表达式。
		sed命令定位文本方法
			x					x为指定行号
			x,y					指定从x到y的行号范围
			/pattern/			查询包含模式的行
			/pattern/pattern/	查询包含两个模式的行
			/pattern/,x			从与pattern的匹配行到x行之间的行
			x,/pattern/			从x行到与pattern的匹配行之间的行
			x,y!				查询不包括x和y行号的行
	sed编辑命令：
		p				打印匹配行
		=				打印文件行号
		a\				在定位行之后追加文本信息
		i\				在定位行之前插入文本信息
		d				删除定位行
		c\				用新文本替换定位文本
		s				使用替换模式替换相应模式
		r				从另一个文本中读文本
		w				将文本写入到一个文件
		y				变换字符
		q				第一个模式匹配完成后退出
		l				显示与八进制ASCII码等价的控制字符
		{}				在定位行执行的命令组
		n				读取下一行输入行，用下一个命令处理新的行
		h				将模式缓冲区的文本复制到保持缓冲区
		H				将模式缓冲区的文本最佳到保持缓冲区
		x				互换模式缓冲区和保持缓冲区的内容
		g				将保持缓冲区的内容复制到模式缓冲区
		G				将保持缓冲区的内容追加到模式缓冲区
		
4.3 awk编程
	4.3.1 awk编程模型 
		awk程序由一个主输入循环（main input loop）维持，主输入循环反复执行，知道终止条件被触发。当然，主输入循环无须由程序员去写，awk已经搭建好主输入循环的框架，程序员写的代码被签到主输入循环框架中执行。
		主输入循环自动一次读取输入文件行，以供处理，而处理文件行的动作是由程序员添加的。
		我们可以简单地将awk编程模型分为三个阶段：
			1.读输入文件之前的执行代码段（由BEGIN关键字标识）
			2.读取输入文件时的执行代码段
			3.读输入文件完毕之后的执行代码段（由END关键字标识）
		调用awk的方法与调用sed类似，也是三种方式：
			1.在Shell命令行输入命令调用awk，格式为：awk 【-F 域分隔符】 ‘awk程序段’ 输入文件
			2.将awk程序段插入脚本文件，然后通过awk命令调用它，格式为：awk -f awk脚本文件 输入文件
			3.将sed命令插入脚本文件之后，最常用的方法是设置该脚本文件为可执行，然后直接指向该脚本文件，格式为：
				./awk脚本文件 输入文件