15.1 脚本编写风格
	15.1.1 缩进
		一般缩进为四个字节。
	15.1.2 {}的格式
		在Linux Shell编程中，“{}”括号主要用于对函数体的范围进行界定，现有的“{}”括号的格式主要包括两种，一种是“{”括号与“}”括号每个占一行，缩进与函数名一致，而函数缩进4个字符。
		另外一种格式是“{”括号与函数名在同一行中，函数体缩进4个字符，而“}”括号则单独占用一行。
	15.1.3 空格和空行的用法
		Linux Shell脚本执行时，空格和空行不占内存，所以，在编写Linux Shell脚本时可以使用空格或空行来使编写的Shell脚本看上去美观大方。
	15.1.4 判断和循环的编程风格
		判断包括if结构、if/else结构、if/elif/else结构以及case结构。
	15.1.5 命名规范
		对于函数命名时，每个人都有自己的标准。
	15.1.6 注释风格
		代码中的注释是必须的，否则编写完脚本一段时间后，就容易忘记该脚本的用途，但过量的注释会使脚本看起来很复杂，所以，在加注释时要有一个度。
15.2 脚本优化
	15.2.1 简化脚本
		Linux Shell编程人员学习编写Shell脚本时，常常遇到的一个问题就是重复编写他们在脚本中已经编写过得代码。其实不需要重复编写这些代码，只需创建一个函数或通过其他方式来处理这些重复部分。
	15.2.2 保持脚本的灵活性
		Shell脚本编程的新手常常犯的另一个错误是在程序或Shell脚本中对静态值进行硬编码，从而限制了脚本的灵活性。
	15.2.3 给用户足够的提示
		由于我们编写的脚本有时会提供给其他用户使用，因此，在编写有参数输入的脚本时，要特别注意给用户足够的提示，提示用户需要输入的参数是什么，同事提供参数个数和参数类型判断，否则用户不了解脚本中设置的参数信息，就可能无法完成该脚本的执行。
15.3 Linux中的特殊命令
	有很多命令在Linux Shell编程过程中非常有用，如shift命令可以用于脚本传递时的参数偏移，getopts用于形成命令行的标准形式。
	15.3.1 shift命令
		shift命令主要用于向脚本传递参数时的每一位参数偏移，其中，每次讲参数位置向左偏移一位。
	15.3.2 getopts命令
		Linux Shell中提供了一条命令获取和处理命令行选项的getopts语句，该语句可以编写脚本，使控制多个命令行参数更加容易，该语句格式如下：
			getopts option_str variable
		在该命令行的option_str中包含一个有效的单字符选项。若getopts命令在命令行中发现了连字符，那么该命令将用连字符后面的字符与option_str相比较。若匹配成功，则把变量variable的值设为该选项；若匹配不成功，则variable设为“？”。当getopts发现连字符后面没有字符后，会返回一个非零的状态值。
		Shell程序中能利用getopts的返回值建立一个循环。
15.4 交互式和非交互式Shell脚本
	交互式模式就是Shell等待用户的输入，并且执行用户提交的命令。这种模式被称为交互式，是因为Shell与用户进行交互，该模式也是大多数用户非常熟悉的：登录、执行一些命令、倒退。
	非交互式模式，在这种模式下，Shell不与用户进行交互，而是读取存放在文件中的命令，并执行它们。当它读到文件的结尾时，Shell就结束。
15.5 /dev文件系统
	在Linux Shell中存在伪文件系统/dev，该文件系统包括每个物理设备对应的文件，如果需要挂载物理设备或者虚拟物理设备，可通过操作/dev来完成。
	15.5.1 /dev文件系统基础知识
		Linux中的设备有两种类型：字符设备（无缓冲且只能顺序存取）和块设备（有缓冲且可以随机存取）。每个字符设备和块设备都有主、次设备号，主设备号相同的设备是同类设备（使用同一个驱动程序）。
	15.5.2 /dev/zero伪设备
		/dev/zero是一个非常有用的伪设备，它可用于创建空文件，也可以创建RAM文件等。
	15.5.3 /dev/null伪设备
		dev/null相当于一个文件的“黑洞”，它非常接近于一个只写文件，所以，所以，写入它的内容都会永远丢失，但是对于命令行和脚本来说，/dev/null却非常有用。
		